#!/usr/bin/env node
'use strict';

const Liftoff = require('liftoff');
const argv = require('minimist')(process.argv.slice(2));
const path = require('path');
const cli = new Liftoff({
    name: 'fk',
    processTitle: 'fiskit',
    moduleName: 'fiskit',
    configName: '{fk,fis}-conf',
    extensions: {
        '.js': null
    }
});

cli.launch({
    cwd: argv.r || argv.root,
    configPath: argv.f || argv.file
}, env => {
    let fiskit;
    if (!env.modulePath) {
        fiskit = require('../');
    } else {
        fiskit = require(env.modulePath);
    }
    
    // 默认使用fis3-server-node2作为内置server
    fiskit.set('server.type', 'node2');

    // 截获release后续参数
    argv._[0] === 'release' && setReleaseArg(argv);

    fiskit.cli.run(argv, env);
});

// 获取release参数，添加fiskit设置
function setReleaseArg(argv) {
    if(argv.D || argv.domain) {
        fiskit.set('--domain', true);
        delete argv.D;
        delete argv.domain;
    }
    if(argv.p || argv.pack) {
        fiskit.set('--pack', true);
        delete argv.p;
        delete argv.pack;
    }
}